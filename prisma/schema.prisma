// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PromptStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String?  // Only if using Credentials Provider
  name           String?
  image          String?
  role           UserRole  @default(USER)
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  prompts        Prompt[]  // relationship: one user can create many prompts
  upvotes        UserPromptUpvote[] // Track which prompts a user has upvoted
}

model Prompt {
  id        String       @id @default(cuid())
  title     String
  content   String
  useCase   String
  source    String
  upvotes   Int          @default(0)
  status    PromptStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relationship to User
  createdBy  String?
  user       User?       @relation(fields: [createdBy], references: [id])
  
  // For tracking who upvoted this prompt
  upvotedBy  UserPromptUpvote[]
}

// Join table to track which users have upvoted which prompts
model UserPromptUpvote {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId]) // Ensure a user can only upvote a prompt once
}